#include <stdio.h>
#include <stdbool.h>

#define MAX_SIZE 10

int deque[MAX_SIZE];
int front = -1;
int rear = -1;

bool isFull()
{
    if ((front == 0 && rear == MAX_SIZE - 1) || (front == rear + 1))
        return true;
    else
        return false;
}

bool isEmpty()
{
    if (front == -1)
        return true;
    else
        return false;
}

void enqueueFront(int value)
{
    if (isFull())
    {
        printf("Deque is full. Cannot enqueue.\n");
    }
    else
    {
        if (front == -1)
        {
            front = 0;
            rear = 0;
        }
        else if (front == 0)
        {
            front = MAX_SIZE - 1;
        }
        else
        {
            front--;
        }

        deque[front] = value;
        printf("Enqueued %d at the front.\n", value);
    }
}

void enqueueRear(int value)
{
    if (isFull())
    {
        printf("Deque is full. Cannot enqueue.\n");
    }
    else
    {
        if (front == -1)
        {
            front = 0;
            rear = 0;
        }
        else if (rear == MAX_SIZE - 1)
        {
            rear = 0;
        }
        else
        {
            rear++;
        }

        deque[rear] = value;
        printf("Enqueued %d at the rear.\n", value);
    }
}

void dequeueFront()
{
    if (isEmpty())
    {
        printf("Deque is empty. Cannot dequeue.\n");
    }
    else
    {
        printf("Dequeued %d from the front.\n", deque[front]);

        if (front == rear)
        {
            front = -1;
            rear = -1;
        }
        else if (front == MAX_SIZE - 1)
        {
            front = 0;
        }
        else
        {
            front++;
        }
    }
}

void dequeueRear()
{
    if (isEmpty())
    {
        printf("Deque is empty. Cannot dequeue.\n");
    }
    else
    {
        printf("Dequeued %d from the rear.\n", deque[rear]);

        if (front == rear)
        {
            front = -1;
            rear = -1;
        }
        else if (rear == 0)
        {
            rear = MAX_SIZE - 1;
        }
        else
        {
            rear--;
        }
    }
}

int peekFront()
{
    if (isEmpty())
    {
        printf("Deque is empty. Cannot peek.\n");
        return -1;
    }
    else
    {
        return deque[front];
    }
}

int peekRear()
{
    if (isEmpty())
    {
        printf("Deque is empty. Cannot peek.\n");
        return -1;
    }
    else
    {
        return deque[rear];
    }
}

void display()
{
    if (isEmpty())
    {
        printf("Deque is empty.\n");
    }
    else
    {
        printf("Deque elements: ");

        int i = front;

        while (true)
        {
            printf("%d ", deque[i]);

            if (i == rear)
                break;

            if (i == MAX_SIZE - 1)
                i = 0;
            else
                i++;
        }

        printf("\n");
    }
}

int main()
{
    int choice, value;

    while (1)
    {
        printf("1. Enqueue Front\n");
        printf("2. Enqueue Rear\n");
        printf("3. Dequeue Front\n");
        printf("4. Dequeue Rear\n");
        printf("5. Peek Front\n");
        printf("6. Peek Rear\n");
        printf("7. Display\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
            printf("Enter the value to enqueue at the front: ");
            scanf("%d", &value);
            enqueueFront(value);
            break;
        case 2:
            printf("Enter the value to enqueue at the rear: ");
            scanf("%d", &value);
            enqueueRear(value);
            break;
        case 3:
            dequeueFront();
            break;
        case 4:
            dequeueRear();
            break;
        case 5:
            printf("Front value: %d\n", peekFront());
            break;
        case 6:
```c
            printf("Rear value: %d\n", peekRear());
            break;
        case 7:
            display();
            break;
        case 8:
            printf("Exiting...\n");
            return 0;
        default:
            printf("Invalid choice. Please enter a valid option.\n");
        }
    }

    return 0;
}
